?library
?INSTALL
rcppeigen_hello_world()
devtools::install()
ls("package:qshapr")
rcppeigen_hello_world()
rcppeigen_hello_world()
r_inv_binom_coef(5)
r_inv_binom_coef(5)
r_inv_binom_coef(5)
r_inv_binom_coef(5)
r_inv_binom_coef(5)
r_complex_v_invc_degree(9)
r_complex_v_invc_degree(9)
install.packages("RcppEigen")
library(RcppEigen)
r_complex_v_invc_degree(9)
x <- 1:10
mean(x)
library(xgboost)
install.package("xgboost")
install.packages("xgboost")
install.packages("MASS")
library(xgboost)
library(MASS)
data <- as.data.frame(MASS:Boston)
data <- as.data.frame(MASS::Boston)
x <- as.matrix(data[, -14])
y <- data[, 14]
model <- xgboost(data = x, label = y, max_depth = 2, nrounds = 50, objective = "reg:squarederror", verbose = 0)
complex_v_invc_degree(10)
qshapr::r_complex_v_invc_degree(10)
qshapr::r_inv_binom_coef()
library(qshapr)
library(xgboost)
# Train an XGBoost model
data(agaricus.train, package='xgboost')
train <- agaricus.train
bst <- xgboost(data = train$data, label = train$label, max_depth = 2,
eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
# Create a tree parser
parser <- tree_parser()
# Parse the XGBoost model
parse_model(parser, bst)
library(xgboost)
data(agaricus.train, package='xgboost')
train <- agaricus.train
bst <- xgboost(data = train$data, label = train$label, max_depth = 2,
eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
parser <- tree_parser()
parse_model(parser, bst)
clear
library(XGBoost)
library(xgboost)
r_store_copmplex_v_invc(9)
qshapr::r_store_complex_v_invc(9)
qshapr::r_store_complex_v_invc(20)[9, :9]
stored = qshapr::r_store_complex_v_invc(20)
stored[9]
stored
stored[9, ]
stored[9, :9]
stored[10, 1:10]
stored[10, 1:9]
v1 <- c(3, 6 - 1i, 5 + 1i, 6 + 1i)
v2 <- c(5, 4 - 1i, 6 + 1i, 4 + 1i)
v3 <- c(3, 6 - 1i, 5 + 1i)
v4 <- c(5, 4 - 1i, 6 + 1i)
qshapr::r_complex_dot_v2(v3, v4, length(v1))
v5 <- c(3, 6 - 1i, 5 + 1i, 5 - 1i, 6 + 1i)
v6 <- c(5, 4 - 1i, 6 + 1i, 6 - 1i, 4 + 1i)
v7 <- c(3, 6 - 1i, 5 + 1i)
v8 <- c(5, 4 - 1i, 6 + 1i)
qshapr::r_complex_dot_v2(v7, v8, length(v5))
source("tests/utils_tests.R")
source("tests/utils_tests.R")
source("tests/ensembles_tests.R")
source("tests/ensembles_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
# Create explainer
explainer <- qshapr::create_tree_explainer(tree_regressor)
print(explainer)
summary <- qshapr::get_summary(explainer)
print(summary)
ypred = predict(tree_regressor, newdata = x)
sst <- sum((y - mean(y))^2)
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
install.packages("fastshap")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests.R")
source("tests/dt_tests_simple.R")
source("tests/dt_tests.R")
source("dt_tests_simple.R")
source("tests/dt_tests_simple.R")
source("tests/dt_tests_simple.R")
clear()
source("tests/utils_tests.R")
source("tests/dt_tests_simple.R")
source("tests/dt_tests.R")
source("tests/dt_tests_simple.R")
source("tests/dt_tests_simple.R")
rpart?
?rpart
rpart
?rpart.control
source("tests/dt_tests_simple.R")
source("tests/xgboost_test.R")
explainer <- qshapr::create_tree_explainer(model)
install.packages("xgboost")
update.packages("xgboost")
library(xgboost)
library(qshapr)
X <- matrix(1:10, ncol=1)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
explainer <- qshapr::create_tree_explainer(model)
xgb.parameters
xgb
attr(model)
attributes(model)
print(model$params)
X <- matrix(1:10, ncol=1)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
str(model, max.level = 2)
library(xgboost)
library(qshapr)
X <- matrix(1:10, ncol=1)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
print(model$raw)
print(model$call)
xgb.dump(model, dump_format='json')
model_json = xgb.dump(model, dump_format='json')
model_From_json <- fromJSON(bst_json, simplifyDataFrame = FALSE)
cat(model_json)
model_json <- xgb.dump(model, with_stats = TRUE, dump_format='json')
cat(model_json)
model$params
xgb.attributes(model)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
explainer <- qshapr::create_tree_explainer(model)
explainer <- qshapr::create_tree_explainer(model)
explainer <- qshapr::create_tree_explainer(model)
explainer <- qshapr::create_tree_explainer(model)
explainer <- qshapr::create_tree_explainer(model)
X <- matrix(1:10, ncol=1)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
explainer <- qshapr::create_tree_explainer(model)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(xgboost)
library(qshapr)
X <- matrix(1:10, ncol=1)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
explainer <- qshapr::create_tree_explainer(model)
library(xgboost)
library(qshapr)
X <- matrix(1:10, ncol=1)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
explainer <- qshapr::create_tree_explainer(model)
library(xgboost)
library(qshapr)
X <- matrix(1:10, ncol=1)
y <- rep(0, 10)
model <- xgboost(data = X, label = y, nrounds = 1, verbose = 0)
print(class(model))
explainer <- qshapr::create_tree_explainer(model)
library(xgboost)
library(qshapr)
# Use the iris dataset
data(iris)
X <- as.matrix(iris[, -5]) # Features
y <- as.integer(iris$Species) - 1L # Labels (0, 1, 2)
# Train an XGBoost model for multiclass classification
model <- xgboost(
data = X,
label = y,
nrounds = 5, # Increased rounds for a more complex model
objective = "multi:softprob", # For multiclass classification
num_class = 3, # Number of classes in iris$Species
verbose = 0,
max_depth = 6 # Ensure some splits
)
print(class(model))
print(model$params$booster) # To confirm it's a tree booster
explainer <- qshapr::create_tree_explainer(model)
library(xgboost)
library(qshapr)
# Use the iris dataset
data(iris)
X <- as.matrix(iris[, -5]) # Features
y <- as.integer(iris$Species) - 1L # Labels (0, 1, 2)
# Train an XGBoost model for multiclass classification
model <- xgboost(
data = X,
label = y,
nrounds = 5, # Increased rounds for a more complex model
objective = "multi:softprob", # For multiclass classification
num_class = 3, # Number of classes in iris$Species
verbose = 0,
max_depth = 6 # Ensure some splits
)
print(class(model))
print(model$params$booster) # To confirm it's a tree booster
explainer <- qshapr::create_tree_explainer(model)
library(xgboost)
library(qshapr)
# Use the iris dataset
data(iris)
X <- as.matrix(iris[, -5]) # Features
y <- as.integer(iris$Species) - 1L # Labels (0, 1, 2)
# Train an XGBoost model for multiclass classification
model <- xgboost(
data = X,
label = y,
nrounds = 5, # Increased rounds for a more complex model
objective = "multi:softprob", # For multiclass classification
num_class = 3, # Number of classes in iris$Species
verbose = 0,
max_depth = 6 # Ensure some splits
)
print(class(model))
print(model$params$booster) # To confirm it's a tree booster
# Add these lines for debugging
print(getNamespaceInfo("qshapr", "path"))
print(getLoadedDLLs()[["qshapr"]])
explainer <- qshapr::create_tree_explainer(model)
source("tests/xgboost_test.R")
devtools::load_all()
source("tests/xgboost_test.R")
devtools::document()
devtools::load_all()
source("tests/xgboost_test.R")
install.packages("Rcpp")
source("tests/xgboost_test.R")
devtools::document()
source("tests/xgboost_test.R")
warnings()
source("tests/xgboost_test.R")
devtools::document()
source("tests/xgboost_test.R")
source("tests/xgboost_test.R")
warnings()
devtools::document()
source("tests/xgboost_test.R")
warnings()
devtools::document()
source("tests/xgboost_test.R")
source("~/repositories/qshapr/tests/xgboost_test.R")
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
print(explainer)
print(explainer.store_z)
print(explainer.model)
print(explainer)
print(explainer$store_z)
devtools::document()
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
tree_dt <- xgb.model.dt.tree(model = model, use_int_id = TRUE)
print(tree_dt)
devtools::document()
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
qshapr::qshap_loss(model, X, y)
qshapr::qshap_loss(explainer, X, y)
devtools::document()
devtools::document()
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
qshapr::qshap_loss(explainer, X, y)
print(type(explainer$store_v_invc))
print(class(explainer$store_v_invc))
print(class(explainer$store_z))
T0_x
qshapr::qshap_loss(explainer, X, y)
T0_x
str(x)
str(res)
str(summary_tree)
str(store_v_invc)
str(store_z)
str(T0_x)
str(x)
str(res)
str(summary_tree)
clear
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
qshapr::qshap_loss(explainer, X, y)
clear
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
qshapr::qshap_loss(explainer, X, y)
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
qshapr::qshap_loss(explainer, X, y)
i
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
qshapr::qshap_loss(explainer, X, y)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
qshapr::qshap_loss(explainer, X, y)
View(shap_cur)
View(shap_cur)
View(shap_cur)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
loss = qshapr::qshap_loss(explainer, X, y)
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
loss = qshapr::qshap_loss(explainer, X, y)
loss
X
y
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
print(X)
loss = qshapr::qshap_loss(explainer, X, y)
loss
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
rsq
install.packages("modeldata")
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
install.packages("reticulate")
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
loss = qshapr::qshap_loss(explainer, X, y)
print(loss)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
devtools::document()
source("~/repositories/qshapr/tests/xgboost_test.R", echo=TRUE)
